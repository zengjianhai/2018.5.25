<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
    	http://www.springframework.org/schema/beans  
    	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    	http://www.springframework.org/schema/tx   
   		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context-3.0.xsd
    	http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	<context:component-scan base-package="com.springmvc.hello" />
	<mvc:annotation-driven />
	<!-- 配置资源文件,防止被拦截 -->
	<mvc:resources location="/WEB-INF/view/image/" mapping="/WEB-INF/image/**" />
	<mvc:resources location="/WEB-INF/view/js/" mapping="/WEB-INF/js/**" />
	<mvc:resources location="/WEB-INF/view/css/" mapping="/WEB-INF/css/**" />
	<!-- 不拦截静态资源，如上面的 -->
	<mvc:default-servlet-handler/>

	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" /><!-- 拦截所有请求 -->
			<!-- spring-mvc-3.0.xsd不支持下面的标签 -->
			<mvc:exclude-mapping path="/user" /><!-- 表示不被拦截的请求 -->
			<mvc:exclude-mapping path="/index.action" />
			<bean class="com.springmvc.interceptor.UserSecurityInterceptor">
				<property name="excludedUrls">
					<list>
						<value>/user</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>


	<bean name="myInterceptor" class="com.springmvc.interceptor.MyInterceptor" />
	<!-- springmvc提供的映射器 -->
	<bean
		class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
		<!-- 自定义拦截类 -->
		<!-- <property name="interceptors"> <list> <ref bean="myInterceptor"/> 
			</list> </property> -->
	</bean>


	<!-- springmvc提供的适配器 -->
	<bean
		class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />


	<!-- springmvc提供的视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView" p:prefix="/WEB-INF/jsp/"
		p:suffix=".jsp">
	</bean>


	<!-- controller -->
	<bean name="/index.action" class="com.springmvc.controller.HandlerController" />
	<bean name="/test" class="com.springmvc.controller.TestController">
		<property name="synchronizeOnSession" value="true" />
		<property name="supportedMethods" value="POST,GET" />
		<!-- 没有session会报HttpSessionRequiredException异常，第一次session是通过getSession才有的 -->
		<property name="requireSession" value="true" />
	</bean>

	<!-- 自定义session.getAttribute("user")适配器 -->
	<bean class="com.springmvc.adapter.MyControllerAdapter" />
	<bean name="/mytest" class="com.springmvc.adapter.MyTestController" />

	<!-- <bean name="user" class="com.springmvc.bean.User"> <property name="name" 
		value="miner"></property> <property name="age" value="20"></property> </bean> -->

	<!-- 第二种解决日期方案 -->
	<!-- <bean name="formatService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"> 
		<property name="converters"> <set> <bean class="com.springmvc.converter.StringToDateConverter"></bean> 
		</set> </property> </bean> <mvc:annotation-driven conversion-service="formatService" 
		/> -->

	<!-- springMVC页面 -->
	<!-- 处理ajax的，json.jsp -->
	<mvc:view-controller path="/json" view-name="json" />



	<!-- 异常处理 -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
		<!-- value="error" 表示跳转的逻辑视图名字 -->
		<property name="defaultErrorView" value="error/error"></property>

		<!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
		<property name="exceptionAttribute" value="ex"></property>

		<!-- 定义需要特殊处理的异常，用简单类名或全限定名作为key，异常页名的逻辑视图名作为value -->
		<property name="exceptionMappings">
			<props>
				<prop key="IOException">error/error_io</prop>
				<prop key="java.sql.SQLException">error/error_sql</prop>
			</props>
		</property>
	</bean>


	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<!-- 注意:bean的名字不要改,一定要叫multipartResolver -->
	<bean name="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 指定所上传文件的总大小不能超过指定字节大小 -->
		<property name="maxUploadSize" value="20000000" />
	</bean>
	
	
</beans> 